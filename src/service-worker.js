/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== 'navigate') {
            return false;
        } // If this is a URL that starts with /_, skip.

        if (url.pathname.startsWith('/_')) {
            return false;
        } // If this looks like a URL for a resource, because it contains // a file extension, skip.

        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        } // Return true to signal that we want to use the handler.

        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
    // Add in any other file extensions or routing criteria as needed.
    ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png,jpg,gif'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new StaleWhileRevalidate({
        cacheName: 'images',
        plugins: [
            // Ensure that once this runtime cache reaches a maximum size the
            // least-recently used images are removed.
            new ExpirationPlugin({ maxEntries: 50 }),
        ],
    })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Any other custom service worker logic can go here.


const STATIC_CACHE = 'static-v0.2';
const DYNAMIC_CACHE = 'dynamic-v0.2';
const INMUTABLE_CACHE = 'inmutable-v0.2';
//Limite en mb
const CACHE_DYNAMIC_LIMIT = 5;
//Si  el cache llega al maximo permitido se borra y refresca
function limpiarCache( cacheName, numeroItems ) {

    caches.open( cacheName )
        .then( cache => {

            return cache.keys()
                .then( keys => {

                    if ( keys.length > numeroItems ) {
                        cache.delete( keys[0] )
                            .then( limpiarCache(cacheName, numeroItems) );
                    }
                });


        });
}
//Archivos indispensables [Pueden ser editados]
const APP_SHELL = [

];
//Archivos fijos por lo Grl. son librerias
const APP_SHELL_INMUTABLE=[

];
//Instalamos el cache de nuestra app
self.addEventListener('install', e =>{
    const cacheStatic=caches.open(STATIC_CACHE).then(cache=>cache.addAll(APP_SHELL));
    const cacheInmutable=caches.open(INMUTABLE_CACHE).then(cache=>cache.addAll(APP_SHELL_INMUTABLE));
    e.waitUntil(Promise.all([cacheStatic,cacheInmutable]));
});

//Activamos la cache del storage
self.addEventListener('activate', e => {

    const respuesta = caches.keys().then( keys => {

        keys.forEach( key => {

            if (  key !== STATIC_CACHE && key.includes('static') ) {
                return caches.delete(key);
            }
            if (  key !== DYNAMIC_CACHE && key.includes('dynamic') ) {
                return caches.delete(key);
            }
        });

    });

    e.waitUntil( respuesta );


});

//Network with cache fallback
self.addEventListener('fetch', e =>{

    if(e.request.method === 'POST' || e.request.method === 'PUT'){

        return fetch(e.request);

    }else{

        const respuesta = caches.match( e.request )
            .then( res => {

                if ( res ) return res;
                // No existe el archivo
                // tengo que ir a la web
                //  console.log('No existe', e.request.url );

                return fetch( e.request ).then( newResp => {

                    caches.open( DYNAMIC_CACHE )
                        .then( cache => {
                            cache.put( e.request, newResp );
                            limpiarCache( DYNAMIC_CACHE, CACHE_DYNAMIC_LIMIT );
                            limpiarCache( STATIC_CACHE, CACHE_DYNAMIC_LIMIT );

                        });
                    return newResp.clone();
                })
                    .catch(err=>{
                        console.error('Ups algo fallo')
                        // if(e.request.headers.get('accept').includes('text/html')){
                        //     console.log('la pagina pedida fue un html');
                        //     return caches.match('/views/error.html');
                        // }
                    })

            });
        e.respondWith( respuesta );
    }
});






